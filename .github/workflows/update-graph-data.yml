name: Update Graph Data

on:
  push:
    branches: [ main ]
    paths:
      - 'memory/**'
      - 'docs/**'
      - 'legal/**'
      - 'assets/data/**'
  workflow_dispatch:
    inputs:
      force_refresh:
        description: 'Force refresh all data'
        required: false
        type: boolean
        default: false
      debug_mode:
        description: 'Enable debug mode'
        required: false
        type: boolean
        default: false

jobs:
  update-graph-data:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for git operations

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        npm install -g typescript ts-node

    - name: Get commit info
      id: commit
      run: |
        echo "hash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
        echo "short_hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "branch=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_OUTPUT

    - name: Generate index and graph data
      id: generate
      env:
        FORCE_REFRESH: ${{ github.event.inputs.force_refresh == 'true' }}
        DEBUG_MODE: ${{ github.event.inputs.debug_mode == 'true' }}
      run: |
        mkdir -p logs
        node .github/scripts/generate-index.js 2>&1 | tee logs/generate.log
        echo "generation_exit_code=${PIPESTATUS[0]}" >> $GITHUB_OUTPUT

    - name: Validate generated data
      id: validate
      if: steps.generate.outputs.generation_exit_code == 0
      run: |
        node .github/scripts/validate-index.js 2>&1 | tee logs/validate.log
        echo "validation_exit_code=${PIPESTATUS[0]}" >> $GITHUB_OUTPUT

    - name: Check for changes
      id: changes
      run: |
        git add assets/data/
        git status --porcelain
        echo "has_changes=$(git status --porcelain | grep -q '^'; echo $?)" >> $GITHUB_OUTPUT

    - name: Configure Git
      if: steps.changes.outputs.has_changes == 0
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"

    - name: Commit and push changes
      if: steps.changes.outputs.has_changes == 0
      run: |
        git checkout -b gh-pages-data
        git commit -m "Update graph data [skip ci]

        Generated from commit: ${{ steps.commit.outputs.hash }}
        Branch: ${{ steps.commit.outputs.branch }}
        Force refresh: ${{ github.event.inputs.force_refresh }}
        Debug mode: ${{ github.event.inputs.debug_mode }}"
        git push origin gh-pages-data --force

    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: graph-data-logs
        path: logs/
        retention-days: 30

    - name: Create issue on failure
      if: |
        failure() || 
        steps.generate.outputs.generation_exit_code != 0 || 
        steps.validate.outputs.validation_exit_code != 0
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          let logs = '';
          try {
            if (fs.existsSync('logs/generate.log')) {
              logs += '\n\n### Generation Log:\n```\n' + fs.readFileSync('logs/generate.log', 'utf8') + '\n```';
            }
            if (fs.existsSync('logs/validate.log')) {
              logs += '\n\n### Validation Log:\n```\n' + fs.readFileSync('logs/validate.log', 'utf8') + '\n```';
            }
          } catch (error) {
            logs = '\n\nError reading logs: ' + error.message;
          }
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Graph data update failed for commit ${context.sha.slice(0, 7)}`,
            body: `The graph data update workflow failed for commit ${context.sha}.

            ### Details:
            - Workflow run: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}
            - Commit: ${context.sha}
            - Branch: ${process.env.GITHUB_REF}
            - Force refresh: ${context.payload.inputs?.force_refresh || 'false'}
            - Debug mode: ${context.payload.inputs?.debug_mode || 'false'}
            
            ${logs}
            
            Please check the logs for more details.`
          }); 